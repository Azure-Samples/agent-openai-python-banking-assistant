from app.models.chat import ChatMessage, ChatAppRequest, ChatResponse
from dependency_injector.wiring import Provide, inject
from app.agents.foundry.supervisor_agent_foundry import SupervisorAgent

from agent_framework import AgentThread
from app.config.observability import enable_trace

import logging

logger = logging.getLogger(__name__)

class SupervisorOrchestrationService:
   def  __init__(self,supervisorAgent: SupervisorAgent):

    self.supervisorAgent = supervisorAgent


   async def processMessage(self, user_message: str , thread_id : str | None) -> tuple[str, str | None]:
        """Process a chat message using the injected Azure Chat Completion service and return response and thread id."""

        thread = None

        if thread_id is None:
            thread = AgentThread()
        else:
            thread = AgentThread(service_thread_id=thread_id)

        await self.supervisorAgent.set_active_thread(thread)

        supervisor_agent_ag =  await self.supervisorAgent.build_af_agent(thread_id)

        response = await supervisor_agent_ag.run(user_message, thread=thread)

        return response.text, thread.service_thread_id